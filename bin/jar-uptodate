#!/usr/bin/env bash
## jar-uptodate -- Find JAR/Java files and sort them by date modified.

echo "Sorted list of 'aos/ar(chibus)-*.jar' files (by last modification date) in working directory './dist':"
echo "--------------------------------------------------------------------------------"
find ./dist \( -name "archibus-*.jar" -o -name "aos-*.jar" -o -name "ar-*.jar" \) -printf "%T@ %CY-%Cm-%CdT%CH:%CM:%CS %p\n" | sort -n | cut -d " " -f 2- | sed "s/$(date +%F)T/   TODAY   /g"
# %Tk: File's last modification time in the format specified by k.
# @: seconds since Jan. 1, 1970, 00:00 GMT, with fractional part.
# %CY-%Cm-%CdT%CH:%CM:%CS: ISO 8601 date and time.
# %p: File's name.

echo ""
echo "Sorted list of 'aos/ar(chibus)-*.jar' files (by last modification date) in Git directory './WEB-INF/lib':"
echo "--------------------------------------------------------------------------------"
find ./WEB-INF/lib \( -name "archibus-*.jar" -o -name "aos-*.jar" -o -name "ar-*.jar" \) -printf "%T@ %CY-%Cm-%CdT%CH:%CM:%CS %p\n" | sort -n | cut -d " " -f 2- | sed "s/$(date +%F)T/   TODAY   /g"

echo ""
REFERENCE_FILE=$(find ./WEB-INF/lib \( -name "archibus-*.jar" -o -name "aos-*.jar" -o -name "ar-*.jar" \) -printf "%T@ %p\n" | sort -n | cut -d " " -f 2- | tail -n 1)
echo "Bottom 5 Java files modified after '$REFERENCE_FILE':"
echo "--------------------------------------------------------------------------------"
# Print all Java files newer than reference file.
find . -type f -name "*.java" -newer "$REFERENCE_FILE" -printf "%T@ %CY-%Cm-%CdT%CH:%CM:%CS %p\n" | sort -n | cut -d " " -f 2- | tail -n 5 | sed "s/$(date +%F)T/   TODAY   /g" > /dev/stderr

echo ""
echo ""
echo "To build the JARs for the project -- in case of (strange) compilation errors in untouched files --"
echo "don't forget to first CLEAN the project (JARs from ./dist):"
echo ""
echo "  ant clean; ant deploy-jetty"
echo "  ^^^^^^^^^^"
echo ""
echo "Though, NOT cleaning will only generate the necessary JAR files -- and not all of them!"

## jar-uptodate ends here
