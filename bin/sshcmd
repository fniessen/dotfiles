#!/usr/bin/expect -f

# sshcmd.exp -- use ssh to remotely execute a command
# Time-stamp: <2011-08-09 Tue 12:36 Fabrice on MEDIACENTER>

# usage: sshcmd.exp [user] [host] [password] [command]

# useful GLOBAL
set argv0 [file tail $argv0]

# check for the correct number of arguments
if {$argc == 4} { ;# no identity file
    set IDFILE ""
    set USER [lindex $argv 0]
    set HOST [lindex $argv 1]
    set PASS [lindex $argv 2]
    set CMD  [lindex $argv 3]
} elseif {$argc == 5} {
    set IDFILE [lindex $argv 0]

    # check for accessibility of identity file
    if {! [file exists $IDFILE]} {
        send_user "$argv0: Identity file `$IDFILE' does not exist.\n"
        exit 1
    }

    set USER [lindex $argv 1]
    set HOST [lindex $argv 2]
    set PASS [lindex $argv 3]
    set CMD  [lindex $argv 4]
} else {
    send_user "Usage: $argv0 \[identity_file\] user host pass command\n"
    exit 1
}

set timeout 30

set PROMPT "(%|#|\\$|>|]) ?(\\u001b\\\[0m)?(\\u001b\\\[K)?$"
                           # for my colorful prompt

log_user 0

if {$IDFILE == ""} {
    spawn ssh $USER@$HOST
} else {
    spawn ssh -i $IDFILE $USER@$HOST
}
match_max 100000   ;# the result might be more than 2000 characters

# interact with SSH
expect {
    timeout {
        send_user "$argv0: Timed out on ssh\n";     exit 1
    }
    -re "No route to host" {
        send_user "$argv0: No route to host\n";     exit 1
    }
    -re "Connection refused" {
        send_user "$argv0: Connection refused\n";   exit 1
    }
    -re "(Permission denied.*|Warning: Identity file .* not accessible: No such file or directory.)" {
        send_user "$argv0: Unable to login\n";      exit 1
    }
    -re "pass.*:"
}

send "$PASS\r"
expect {
    -nocase "ermission denied, please try again." {
        send_user "$argv0: Unable to login\n";      exit 1
    }
    -re ".*$PROMPT"
}

send "$CMD\r"                    ;# send command
# expect "$CMD\r"                ;# discard command echo
expect -re "\n(.*)\r.*$PROMPT"   ;# match and save the result
puts $expect_out(1,string)

# capture the exit code from the remote command
send "echo $?\r"
expect -re "\n(\[\[:digit:]]*)\r.*$PROMPT"
set RC $expect_out(1,string)

send "exit\r"

exit $RC

## sshcmd.exp ends here
