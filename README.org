#+TITLE:     Managing Dotfiles
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:t toc:3

#+FILETAGS:  :personal:
#+SETUPFILE: ~/.dotfiles/org/theme-readtheorg.setup

Your unofficial guide to dotfiles on GitHub:
http://dotfiles.github.io/

https://github.com/alebcay/awesome-shell

http://blog.smalleycreative.com/tutorials/using-git-and-github-to-manage-your-dotfiles/

* Context

I revision-control my configuration files using Git. I have a Bash script
(called ~install~, also under the repository) which either copies or symlinks the
files to their appropriate location on a machine.

So if I need to set up on a new machine, I just do a ~git clone~ of the repository
and run my ~install~ to set up my config files in the appropriate locations.

* Installation

To install the dotfiles on a new machine, we can do so easily by cloning the
repo, and do:

#+begin_src shell
git clone https://github.com/fniessen/dotfiles.git ~/.dotfiles && ~/.dotfiles/install
#+end_src

# #+begin_src shell
# git clone https://github.com/fniessen/dotfiles.git ~/.dotfiles
# cd ~/.dotfiles
# git submodule update --init --recursive
# ./install
# #+end_src

# or ~git clone --recursive https://github.com/fniessen/dotfiles.git ~/.dotfiles~?

#+begin_note
If you try this on a brand new PC, you need Cygwin installed with the ~git~
package.
#+end_note

* Structure

- ~bin~ -- Files that are symlinked to any directory with binaries in ~$PATH~
- ~home~ -- Files that are symlinked to ~$HOME~ directory

* Install script

#+begin_src shell :tangle install :padline no
#!/usr/bin/env bash

DOTFILES="${HOME}/.dotfiles"            # Base it on `pwd'!
DOTHOME="${DOTFILES}/home"
DOTBACKUP="${DOTFILES}/backup"

# Make a backup directory for overwritten dotfiles.
if [[ ! -e "${DOTBACKUP}" ]]; then
    mkdir "${DOTBACKUP}"
fi

function symlinkifne {
    echo -n "$1..."
    if [[ -e $1 ]]; then
        # File exists.
        if [[ -L $1 ]]; then
            # It's already a symlink (could have come from this project).
            echo ' symlink already exists... skipping!'
            return
        fi
        # Backup file does not exist yet.
        if [[ ! -e "${DOTBACKUP}/$1" ]]; then
            mv $1 "${DOTBACKUP}/"
            echo -n ' backing up target;'
        fi
    fi
    # Create the link.
    ln -s "${DOTHOME}/$1" $1
    echo ' symlinking... done'
}

cd "${HOME}"

for config_file in $(ls --almost-all "${DOTHOME}")
do
    symlinkifne $(basename $config_file)
done
#+end_src

* Files _local

The ~xxx_local~ files (where ~xxx~ = ~.bashrc~, ~.zshrc~ or ~.gitconfig~, for example)
contain configurations only needed on specific machines you manage.

* Custom scripts

Put your shell scripts in the ~bin/~ directory, and add the following to your
shell rc file:

#+begin_src shell
export PATH=~/.dotfiles/bin:${PATH}
#+end_src

* Oh-My-Zshell

Download *Powerline-compliant fonts*:
- https://github.com/Lokaltog/powerline-fonts
- https://github.com/runsisi/consolas-font-for-powerline

Install one of the following nice fonts:
- Powerline Consolas
- Sauce Code Powerline (Source Code Pro for Powerline)
- DejaVu Sans Mono for Powerline

* FAQ

** Bad owner or permissions on $HOME/.ssh/config

#+begin_src shell
chmod -R 600 ~/.ssh/
#+end_src

** LaTeX classes not found

Edit the ~TEXMFHOME~ line in the file reported by:

#+begin_src shell
kpsewhich texmf.cnf
#+end_src
