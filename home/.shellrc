# Hey Emacs, this is a -*- sh -*- file
## .shellrc --- Common features between Bash and Z Shell

# Copyright (C) 2009-2017 Fabrice Niessen

# Author: Fabrice Niessen <(concat "fniessen" at-sign "pirilampo.org")>
# Keywords: bash, zsh, dotfile, config

#* PATH

# Extend the PATH var (where to look for executable files).
for MAYBE_PATH in "${HOME}/.dotfiles/bin" \
                  "${HOME}/.dotfiles/expect";
do
    # `-e' or `-x'?
    if [ -d "$MAYBE_PATH" ]; then
        PATH="$MAYBE_PATH:$PATH"
    fi
done

# Extend the PATH var (where to look for executable files).  For Cygwin only.
case $(uname -s) in
    CYGWIN*)
        for MAYBE_CYG_PATH in "${HOME}/.dotfiles/winbin";
        do
            # `-e' or `-x'?
            if [ -d "$MAYBE_CYG_PATH" ]; then
                PATH="$MAYBE_CYG_PATH:$PATH"
            fi
        done
        ;;
esac

# Add the current directory as last component in the search path (not to include
# for `root', for security reasons).
if [[ $EUID -ne 0 ]]; then
    PATH="$PATH:."
fi

# Search current directory, home directory, and Tomcat folder
export CDPATH=".:~:/cygdrive/d/Dev/Tools/Tomcat"

#* MANPATH

# set MANPATH so it includes user's private man if it exists
# do the same with MANPATH
#if [ -d $HOME/man ]; then
#    MANPATH=$HOME/man:"${MANPATH}"
#    export MANPATH
#fi

# colon separated list of directories to search for manual pages
#ifnset MANPATH "/usr/man"
    # TODO don't define it like that: does not work under Ubuntu!
    # See `/etc/manpath.config'

#* INFOPATH

# Info readers (standalone + Emacs Info mode)
INFOPATH="/usr/share/info:$INFOPATH"
# include a trailing colon on `INFOPATH' to concatenate the Emacs
# `Info-default-directory-list' when searching for info files
# INFOPATH="$HOME/texlive/2014/texmf/doc/info:$INFOPATH"

PAGER="less"

alias more="less"

# Tailor `less'.
LESS="-F -i -M -R -X"
# export LESS="-P ?c<- .?f%f:Standard input.  ?n:?eEND:?p%pj\%.. .?c%ccol . ?mFile %i of %m  .?xNext\ %x.%t   Press h for help"

# Colored man pages: http://linuxtidbits.wordpress.com/2009/03/23/less-colors-for-man-pages/
# Less Colors for Man Pages
export LESS_TERMCAP_mb=$'\E[01;31m'     # enter_blink_mode.
export LESS_TERMCAP_md=$'\E[01;38;5;74m' # enter_bold_mode.
export LESS_TERMCAP_so=$'\E[38;5;016m\E[48;5;220m' # enter_standout_mode (mode
                                                   # line at the bottom).
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # enter_underline_mode.
export LESS_TERMCAP_me=$'\E[0m'         # exit_attribute_mode (end modes like
                                        # `mb' and `md').
export LESS_TERMCAP_se=$'\E[0m'         # exit_standout_mode.
export LESS_TERMCAP_ue=$'\E[0m'         # exit_underline_mode.
# See `terminfo'.

alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

export LANG=C.UTF-8

export TERM=xterm-256color

tput init

# Find a suitable editor.
for editor in emacsclientw emacsclient emacs; do
    if $(type $editor >& /dev/null); then
        # Set EDITOR.
        case $editor in
            emacsclient*)
                # # doesn't bother waiting for a response
                # export EDITOR="$editor --no-wait"

                # From the man page for emacsclient(1):
                # If the Emacs server is not running, run `emacs --daemon' to
                # start Emacs in daemon mode, and try to connect to it.
                export EDITOR="$editor --alternate-editor=''"
                ;;
            *)
                export EDITOR="$editor"
                ;;
        esac

        alias e="$EDITOR"
        break
    fi
done

alias ek="emacsclient -e '(kill-emacs)'"

# Use `$EDITOR' for programs wanting an editor.
export VISUAL="$EDITOR"                 # For `crontab'.
export CVSEDITOR="$EDITOR"
export SVN_EDITOR="$EDITOR"
export EDIT="$EDITOR"
export ERROR_EDITOR="$EDITOR"
export FCEDIT="$EDITOR"                 # For the `fc' (fix command) builtin
                                        # command.

alias em=emacs-minimal

# ec FILE - open FILE in a running Emacs
ec ()
{
    emacsclient --no-wait "$1"
}

# Grep through the aliases.
alias agrep='alias | grep -i'

LS_OPTIONS="$LS_OPTIONS --show-control-chars"

# Enable color support of `ls'.
if [ "$TERM" != "dumb" ]; then

    # # Add my coloration scheme to directory listings.
    # if [ -f $HOME/.dircolors ]; then
    #     eval "$(dircolors -b $HOME/.dircolors)"
    # else
    #     eval "$(dircolors -b)"
    # fi

    alias ls='ls --color=auto -F'
    alias ll='ls --color=auto -a --group-directories-first -G -h -l'
                                        # Long listing and hidden files.
else
    alias ls='ls -CF'
fi

alias dirf='find . -type d | sed -e "s/[^-][^\/]*\//  |/g" -e "s/|\([^ ]\)/|-\1/"'

alias df='df -kTh'

alias du='du -kh'

alias du='du -h'
alias du1='du -h --max-depth=1'
alias dus='du -ms * | sort -rn'         # Ordered by size.

alias sizes="du --max-depth=1 -k | sort -nr | cut -f2 | xargs -d '\n' du -sh"

alias fd='find . -type d -name'
alias ff='find . -type f -name'

# Play safe!  Prevent some accidental mistakes.
alias rm='rm -i'                        # Confirm removing file.
alias cp='cp -i'                        # Confirm copy over an existing file.
alias mv='mv -i'                        # Confirm move over an existing file.

# Make an extract function!
alias tgz="tar -zxvf"
alias tbz2="tar -jxvf"

# Print a more readable PATH (each directory on a new line).
alias path='echo $PATH | sed -e "s/:/\n/g"'
alias path='echo -e ${PATH//:/\\n}'

# Path.
alias where='type -a'

alias mkall="./configure && make && sudo make install"

# sudo'ers
alias root="su - root"

# Make executable.
alias exe='chmod +x'

# Chown current dir and subdirs.
alias own='sudo chown -R $USER'

alias up='cd ..'
alias -- ..='cd ..'

alias ..2='cd ../..'
alias ..3='cd ../../..'

alias ...='cd ../..'
alias ....='cd ../../..'

# Aliases '-' to 'cd -'.
alias -- -='cd -'

# Directory history.
alias d='dirs -v'

alias t='tail -f'
alias p="$PAGER"
alias m='man'
alias s='sudo'

alias j='jobs -l'
alias l='ls'

alias g='git'
# alias gitroot="cd $(git rev-parse --show-toplevel)" # Conflict with Oh-My-ZShell?

alias tigs='tig status'                 # Use it all of the time!
alias tigb='tig blame'
alias tigall='tig --all'
alias tigreleases='tig --all --simplify-by-decoration'

# Search through files, ignoring .svn directories.
alias svn_find="find . -not \( -name .svn -prune \)"

# Grep a string in every SVN revision of a file.
# Usage: svn_grep_all_rev PATTERN FILE
svn_grep_all_rev() {
    svn log $2 | perl -n -e 'print "$1\n" if m/^r(\d*)\s+/' | (
        while read revision; do
            printf "\e[0;33m%s\e[0m\n" "Revision $revision:"
            svn cat -r $revision $2 | grep $1
            printf "\n"
        done
    )
}

alias svnlog="svn log | perl -l40pe 's/^-+/\n/'"
alias svnshow="svn diff -c"
alias svnwhatchanged="svn log -v"

alias hgrep="history | grep -i"

update_org () {
    (                                   # Directory changes made in a subshell
                                        # do not carry over to the parent shell.
        cd $HOME/Public/Repositories/org-mode;
        git fetch --all --verbose \
            && git rebase origin \
            && make autoloads \
            && echo DON\'T make clean \
            && echo DON\'T make \
            && echo DON\'T sudo make install \
            && echo DON\'T make doc \
            && make info \
            && sudo make install-info \
            && printf "Running org_test, please wait (this can take a while)...\n" \
            && org_test 2>&1 >/dev/null | tail -n 3
    )
}

org_test () {
    (
        cd $HOME/Public/Repositories/org-mode;
        mkdir /tmp/tmp-orgtest 2> /dev/null # TMPDIR must exist!
        TMPDIR=/tmp/tmp-orgtest emacs -Q --batch -L lisp/ -L testing/ -l org-test.el --eval '(setq org-confirm-babel-evaluate nil)' -f org-test-run-batch-tests
    )
}

if [ -d "$HOME/Public/Repositories/org-bash-utils" ]; then
    PATH="$HOME/Public/Repositories/org-bash-utils:$PATH"
    source $HOME/Public/Repositories/org-bash-utils/org-alias
    source $HOME/Public/Repositories/org-bash-utils/awk-alias
fi

# Display the matched pattern in color.
alias grep='grep --color=auto'
alias egrep='grep -E --color=auto'
alias fgrep='grep -F --color=auto'

export GREP_COLOR="0;30;43"

# Grep through the running processes.
alias pgrep='pgrep -fl'

# GraphicsMagick.
alias GIF="gm convert -verbose -interlace LINE"
alias thumb="gm convert -geometry 100x100 -interlace LINE -verbose"
alias region='sleep 3; gm import selection$(date "+%Y%m%d%H%M%S").jpg'
alias screenshot='sleep 5; gm import -window root screen$(date "+%Y%m%d%H%M%S").jpg'
alias window='sleep 3; gm import -frame window$(date "+%Y%m%d%H%M%S").jpg'

gmresize ()
{
    FILES="$@"
    SCALE="1024x768"
  # for i in *.(gif|jpeg|jpg|png);
    for i in $FILES
    do
        echo "Processing image $i ..."
        gm convert -scale $SCALE "$i" $(basename "$i" .${i##*.})-$SCALE.${i##*.}
        # Obscure but useful string operations.
        # (See http://www.arachnoid.com/linux/shell_programming.html.)
    done
}

# find . -name "*png" | xargs -l -i basename -s ".png" "{}" | xargs -l -i  gm convert -quality 85% "{}.png" "{}.jpg"

# List all files modified in the last 24 hours (last full day).
alias oneday='find . -mtime -1 -print'

# List all files modified today only (since start of day only, i.e. 00:00).
today ()
{
    touch -t `date +%m%d0000` /tmp/$$
    find . -type f -newer /tmp/$$
    rm -f /tmp/$$
}

case $(uname -s) in
    Linux*)
        alias vpnup='sudo test; exec sudo openvpn --config $HOME/.hide/OpenVPN-config/mcbe.ovpn --writepid /tmp/openvpn.pid &'  # --daemon'
        alias vpndown='sudo kill -INT `cat /tmp/openvpn.pid`'
        ;;

    CYGWIN*)
        alias vpnup='cd $HOME/.hide/OpenVPN-config; openvpn --config mcbe.ovpn --writepid c:/cygwin/tmp/openvpn.pid &'  # --daemon'
        alias vpndown='killall openvpn'
        ;;
esac

export GS_OPTIONS="-sPAPERSIZE=a4"
alias pdfmerge="gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=./pdf-joined.pdf" # pdfjoin
alias booklet="psbook | psnup -2 | pstops '2:0,1U(21cm,29.7cm)'"
# for Win32, choose gswin32c

# clean [-r] - Remove useless files (recursively).
clean ()
{
    if [ "$1" = "-r" ]; then
        find . \( -name "#*" -o -name "*~" -o -name ".*~" -o \
            -name "*.~[0-9]*~"\ -o -name ".*.~[0-9]*~" -o \
            -name "*.~BASE~" -o -name ".*.~BASE~" \) -ok rm "{}" ";"
    else
        rm -i \#* *~ .*~ *.~[0-9]*~ .*.~[0-9]*~ *.~BASE~ .*.~BASE~
    fi
}

# swap FILE1 FILE2 - Swap FILE1 and FILE2.
# Useful when you want to try a config file obtained from elsewhere, and also
# keep the old version.
swap ()
{
    if [ $# != 2 ]; then
        return 1
    fi
    tmpfile=/tmp/.swapper.$$.$RANDOM
    mv -f $1 $tmpfile
    mv -f $2 $1
    mv -f $tmpfile $2
    return 0
}

saneperms ()
{
    find . -type d -print0 | xargs -0 chmod 755
    find . -type f -print0 | xargs -0 chmod ${1:=644}
}

# # Search for various types or README file in dir and display them in $PAGER.
# readme ()
# {
#     local files
#     files=(./(#i)*(read*me|lue*m(in|)ut)*(ND))
#     if (($#files)); then
#         $PAGER $files
#     else
#         print 'No README files.'
#     fi
# }

safetmp ()
{
    test -d $HOME || exit 1
    test -d $HOME/tmp || mkdir $HOME/tmp
    echo $HOME/tmp/safetmp.$(hostname).$(date +%s).$$
}

timesync ()
{
    if [[ $EUID -eq 0 ]]; then
        ntpdate -u swisstime.ethz.ch
    else
        echo "Must be root"
    fi
}

# Immediately opens the first match.
texman ()
{
    locate $* | grep pdf | grep texlive | head -1 | xargs open;
}

texlist ()
{
    locate $* | grep "\(pdf\|dvi\)" | grep "\ (texlive\|gwTeX\)";
}

alias sp=sendpatch

# This is for the sake of Emacs.
# Local Variables:
# End:

# .shellrc ends here
