
[user]
    name = John Doe
    email = johndoe@example.com

[github]
    user = jdoe

[include]
    path = ~/.gitconfig_local

[alias]
    workprofile = config user.email \"john@work.com\"

[core]
    editor = emacsclient

    pager = "less -R"

#    whitespace = fix,-indent-with-non-tab,trailing-space,space-before-tab,cr-at-eol

[gc]
    auto = 1

[diff]
    renames = copies
    renameLimit = 12000
    algorithm = patience

    mnemonicprefix = true

    tool = meld

[difftool]
    prompt = false

[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"

[alias]
    showtool = "!f () { rev=$(git rev-parse \"${*:-HEAD}\"); git difftool $rev~1 $rev; }; f"

[alias]
    diffall = "!git difftool -t meld --dir-diff"

[apply]
    # Detect whitespace errors when applying a patch.
    whitespace = fix

[pull]
    rebase = preserve

[push]
    default = simple

[merge]
    stat = true
    summary = true

    # Include summaries of merged commits in newly created merge commit messages.
    log = true

    conflictstyle = diff3

    tool = meld

[mergetool "meld"]
    cmd = meld --diff "$LOCAL" "$MERGED" "$REMOTE" --diff "$BASE" "$LOCAL" --diff "$BASE" "$REMOTE" --output "$MERGED"
    # cmd = meld --diff "$LOCAL" "$BASE" "$REMOTE" --diff "$BASE" "$LOCAL" --diff "$BASE" "$REMOTE" --output "$MERGED"
    keepBackup = false

[rebase]
    stat = true

[grep]
    lineNumber = true

    # # Allow extended regular expressions
    # extendedRegexp = true

    fullName = true

[color]
    ui = auto
    branch = auto
    diff = auto
    status = auto
    interactive = auto

[color "branch"]
    current = cyan bold
    local = green bold
    remote = red bold
    upstream = red bold
    plain = yellow reverse

[color "diff"]
    plain = normal
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    commit = yellow
    whitespace = red reverse

[color "status"]
    header = normal
    added = green
    updated = yellow
    changed = magenta
    untracked = red
    branch = cyan bold
    nobranch = red reverse

[color "grep"]
    filename = yellow bold
    linenumber = magenta bold
    match = green reverse bold
    separator = red bold
    selected = white bold
    context = black
    function = red

[format]
    pretty = format:%C(yellow)%h%C(auto)%d%Creset %s %Cgreen<%an>%Creset %C(bold blue)(%ad)%Creset
    # pretty = format:%C(yellow)%h%C(auto)%d%Creset %s %Cgreen<%an>%Creset %C(bold blue)(%ar)%Creset

[alias]

    alias = "!git config -l | grep alias | cut -c 7- | sort"

    type = cat-file -t
    dump = cat-file -p

    exec = '!exec '

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Commit all changes
    ca = !git add -A && git commit -av

    # Credit an author on the LATEST commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    ireb = "!r() { git rebase -i HEAD~$1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    debug  = "!set -x; GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2 git"

    ci = commit

    cp = cherry-pick -x
    pick = cherry-pick -s

    ls = ls-files

    h = help

    grep4d = !sh -c 'git log -p -S'$1' $2' -

    # 2009-05-26  (merged-bed-bug) 6fe85ff regenerate rules Brad Bowman
    logdate = log --format=format:'%ad %d %h %s %an%n' --date=short
    brdate = !"sh -c 'for b in `git branch --no-merged` ; \
               do git logdate -1 -r $b --; done'"

    this = !git init && git add . && git commit -m \"Initial commit\"
    this = !git init && ( [[ -n $(ls) ]] || touch .gitignore ) && git add . && git commit -m \"Initial commit\"

    # Clone a repository including all submodules.
    cl = clone --recursive

    root = rev-parse --show-toplevel

    # Get the path cleaned up.
    root = !pwd -P

    st = status -s -b

    tracked1 = "!f() { tracked=$(git ls-files ${1}); if [[ -z ${tracked} ]]; then echo 'File NOT tracked (or No such file)'; else echo 'File tracked'; fi; }; f"

    tracked2 = "!f() { echo -n ${1}': '; if [[ -f ${1} ]]; then tracked=$(git ls-files ${1}); if [[ -z ${tracked} ]]; then echo 'File NOT tracked'; else echo 'File tracked'; fi; else echo 'No such file!'; fi; }; f"
# does not work!?

    # List all untracked files.
    ls-untracked = ls-files --others

    ignored = ls-files --others --ignored --exclude-standard

    ignore = "!f() { echo $1 >> \"${GIT_PREFIX}.gitignore\"; }; f"

    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged

    assumed = "!git ls-files -v | grep '^h' | cut -c 3-"

    df = diff
    dw = diff --word-diff

    dc = diff --cached

    precommit = diff --cached --diff-algorithm=minimal -w

    today = !git log --since=midnight --author=\"`git config user.name`\" --no-merges --all

    today-all = !git log --since=midnight --no-merges --all

    forkdiff = !bash -c 'git diff $(git merge-base "$1" "$2") "$2" "${@: 3}" ' -

    log-local = log --oneline origin..HEAD

    rma = !git ls-files --deleted -z | xargs -0 git rm

    lp = log -p
    lg = log --decorate --oneline --graph
    lgr = log --decorate --date=relative --graph
    lga = log --decorate --date=short --graph

    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    ld = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph
    ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    ls = "!git status -suno"

    lg50 = "!git log --graph --abbrev-commit --date=relative --pretty=format:'%x00%h%x00%s%x00%cd%x00%an%x00%d' | gawk -F '\\0' '{ printf \"%s\\033[31m%s\\033[0m %-50s \\033[32m%14s\\033[0m \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, gensub(/(.{49}).{2,}/, \"\\\\1...\",\"g\",$3), $4, $5, $6 }' | less -R"
    lg80 = "!git log --graph --abbrev-commit --date=relative --pretty=format:'%x00%h%x00%s%x00%cd%x00%an%x00%d' | gawk -F '\\0' '{ printf \"%s\\033[31m%s\\033[0m %-80s \\033[32m%14s\\033[0m \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, gensub(/(.{79}).{2,}/, \"\\\\1...\",\"g\",$3), $4, $5, $6 }' | less -R"

    graph = log --graph -10 --branches --remotes --tags --format=format:'%C(yellow)%h %Creset %<(75,trunc)%s (%cN, %cr) %Cred%d' --date-order

    ls-modified  = "!git status --porcelain -uno | awk 'match($1, /M/) {print $2}'"
    ls-added     = "!git status --porcelain -uno | awk 'match($1, /A/) {print $2}'"
    ls-deleted   = "!git status --porcelain -uno | awk 'match($1, /D/) {print $2}'"
    ls-renamed   = "!git status --porcelain -uno | awk 'match($1, /R/) {print $2}'"
    ls-copied    = "!git status --porcelain -uno | awk 'match($1, /C/) {print $2}'"
    ls-updated   = "!git status --porcelain -uno | awk 'match($1, /U/) {print $2}'"
    ls-staged    = "!git status --porcelain -uno | grep -P '^[MA]' | awk '{ print $2 }'"

    heads = !"git log --format='%C(yellow)%h%Creset;%C(cyan)%H%Creset;%s %Cgreen<%an>%Creset' | git name-rev --stdin --always --name-only | column -t -s';'"

    last = log -1 --stat

    what = log --pretty=format:'%C(yellow)%h%C(auto)%d%Creset %s %Cgreen<%an>%Creset %C(bold blue)(%ad)%Creset' --date=short --stat

    whatwhen = log --pretty=format:'%C(yellow)%h%C(auto)%d%Creset %s %Cgreen<%an>%Creset %C(bold blue)(%ad)%Creset' --date=iso -p -S

    changed = show --pretty="format:" --name-only

    diffn = diff --name-only

    lf = "log --follow"
    logfile = log --follow -C

    who = shortlog -n -s --
    # who = shortlog -n -s -e --

    amend = "!git log -n 1 --pretty=tformat:%s%n%n%b | git commit -F - --amend"

    amend = commit -a -v --amend
    amend = commit --amend
# fixlastcommit?

# Commit changes to current head as amended commit.
    plus = commit --amend -a -C HEAD

# Append additional changes to the previous commit.
    fixup = commit --amend --reuse-message HEAD

    unmodify = checkout --
    undelete = checkout --

    unstage = reset HEAD --
# OK

    uncommit = reset --soft HEAD~1
# OK (or undolast)

    wipe = reset --hard HEAD~1
# rollback?

    nevermind = !git reset --hard HEAD && git clean -d -f

    r = "remote -v"
    remotes = remote -v

    in = !(echo "Please fetch origin before." && git log --pretty=format:'%C(yellow)%h%C(auto)%d%Creset %s %Cgreen<%an>%Creset %C(bold blue)(%ar)%Creset' ..@{u})
    inf = !(git remote update -p              && git log --pretty=format:'%C(yellow)%h%C(auto)%d%Creset %s %Cgreen<%an>%Creset %C(bold blue)(%ar)%Creset' ..@{u})

    incoming = log ..@{u} --stat

    in-what = diff --stat ...@{u}

    update = !git pull --rebase --prune $@ && git submodule update --init --recursive
    update = !git pull                     && git submodule update --init --recursive

    up = pull --rebase --autostash
# `up' used many times

    up = "!f() { git remote update -p; git merge --ff-only @{u} ; }; f"
# `up' used many times

    # Rebasing non-linear changes (when the fast-forward merge is not possible).
    upr = "!f() { git remote update -p; git rebase -p @{u} ; }; f"

    pull-all = !"old=$(git rev-parse --abbrev-ref HEAD) ; for b in $(git for-each-ref refs/heads --format='%(refname)') ; do git checkout ${b#refs/heads/} ; git pull --ff-only ; done; git checkout ${old}"

    # Git config alias escaping...  This DOES NOT work.
    # prunelocal = !sh -c 'git fetch -p && git branch -vv | grep \": gone]\" | awk \"{print $1}\" | xargs git branch -d'

    # Here is a correct solution (using bash as a command-line).
    prunelocal = "!f() { git fetch -p && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -d ; }; f"

    # Here is a correct solution (which does not need access to the remote Git repo).
    prunelocal = "!f() { git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -d ; }; f"

    when = !stat -c %y .git/FETCH_HEAD

    out = log --pretty=format:'%C(yellow)%h%C(auto)%d%Creset %s %Cgreen<%an>%Creset %C(bold blue)(%ar)%Creset' @{u}..

    outgoing = log @{u}.. --stat

    out-all = log --branches --not --remotes --pretty=format:'%C(yellow)%h%C(auto)%d%Creset %s %Cgreen<%an>%Creset %C(bold blue)(%ar)%Creset'

    sync = !git pull && git push

    sync = !git update && git co master && git pull && git co @{-1}

    # git resync -> sync repository and rebase current branch.
    resync = !sh -c 'BRANCH_NAME=master && git co master && git fe && git reset --hard origin/master && git rebase master'

    # Show verbose output about tags.
    tags = tag -l
    tags = !git tag | sort -V

    releases = log --decorate --oneline --simplify-by-decoration --all

    lasttag = describe --tags --abbrev=0

    co = checkout

    # Switch to a branch, creating it if necessary.
    go = checkout -B

    cob = checkout -b
# grow?

    master = checkout master
    develop = checkout develop

    br = branch -a -vv

    bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"

    bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"

    # Current branch.
    cb = "name-rev --name-only HEAD"

    sincemaster = diff master...

    # Will only try to "merge" if your current HEAD commit is in the branch
    # you're merging in.  This will allow you to merge some commits whilst being
    # sure you won't get conflicts.
    ff = merge --ff-only
    ff = merge --ff-only @{u}

    # Avoid a fast-forward commit.
    mm = merge --no-ff

    mergetest = "!f() { git merge --no-commit --no-ff $1; git merge --abort; echo 'Merge aborted'; }; f"

    # Check how the merge of `dev' into master will go: git mergedryrun dev.
    mergedryrun = "!f() { grep -q 'changed in both' <<< $(git merge-tree $(git merge-base FETCH_HEAD $1) FETCH_HEAD $1) && echo 'Merge conflict detected' || echo 'Merged cleanly'; }; f"

    # Extract the "changed in both" lines as well as the conflicting parts.
    mergedryrunconflicts = "!f() { git merge-tree $(git merge-base $1 $2) $1 $2 | sed -n '/+<<<<<<< .our/,/+>>>>>>> .their/p;/^changed in both/{n;N;N;s/^/#/mg;p}' | cdiff; }; f"

    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    conflicts = "!git ls-files -u | cut -f 2 | sort -u"

    export = archive -o latest.tar.gz -9 --prefix=latest/

    record = !sh -c '(git add -p -- $@ && git commit) || git reset' --

    snapshot = !git stash save "Snapshot: $(date +\"%F %a %R\")" && git stash apply "stash@{0}"

    ss = stash save
    sl = stash list
    sa = stash apply

    stashes = stash list

    save = stash save
    savepatch = stash save --patch
    savescratch = stash save --keep-index
    pop = stash pop

    hide = stash
    unhide = stash apply
# bad aliases, used by some instead to mean assume and unassume...

    stp = stash pop
    std = stash drop

    stashdiff = stash show -p -w stash@{0}
    stash-unapply = !git stash show -p --no-textconv --binary | git apply -R

    # plop = "!git stash && git pull && git stash pop"
    # up = !git stash && git pull origin master && git stash apply
# `up' used many times

# cleanpull
# update (like svn? if we add a git reset in front?)
# sync

    sp = ![[ -z $(git status --porcelain -uno) ]] && git pull || git stash && git pull && git stash pop
    spp = ![[ -z $(git status --porcelain -uno) ]] && git pull || git stash && git pull && git push && git stash pop

    find = "log --all -i --grep"

    rg = "grep --break --heading"

    gr = "grep -i -I"

    lost = "!git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset  %s' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

    graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

    sha1-tag = '!f() { git name-rev --name-only "$@"; }; f'

    rename = branch -m

    where = "branch -a --contains"

    praise = blame -w
    archeology = blame -w -C -n
    whodoikill = blame -w -C -n

    conflicts = diff --name-only --diff-filter=U
    unmerged = diff --name-only --diff-filter=U
