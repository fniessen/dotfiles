[user]
    name = John Doe
    email = johndoe@example.com

[github]
    user = jdoe

[include]
    path = ~/.gitconfig_local

[alias]
    workprofile = config user.email \"john@work.com\"

[core]
    editor = emacsclient

    pager = "less -R"

#    whitespace = fix,-indent-with-non-tab,trailing-space,space-before-tab,cr-at-eol

[gc]
    auto = 1

[diff]
    renames = copies
    renameLimit = 30000

    algorithm = patience

    mnemonicprefix = true

    tool = meld

[difftool]
    prompt = false

[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"

[alias]
    showtool = "!f () { rev=$(git rev-parse \"${*:-HEAD}\"); git difftool $rev~1 $rev; }; f"

[alias]
    diffall = "!git difftool -t meld --dir-diff"

[apply]
    # Detect whitespace errors when applying a patch.
    whitespace = fix

[pull]
    rebase = preserve

[push]
    default = simple

[merge]
    stat = true
    summary = true

    # Include summaries of merged commits in newly created merge commit messages.
    log = true

    conflictstyle = diff3

    tool = meld

[mergetool "meld"]
    cmd = meld --diff "$LOCAL" "$MERGED" "$REMOTE" --diff "$BASE" "$LOCAL" --diff "$BASE" "$REMOTE" --output "$MERGED"
    # cmd = meld --diff "$LOCAL" "$BASE" "$REMOTE" --diff "$BASE" "$LOCAL" --diff "$BASE" "$REMOTE" --output "$MERGED"
    keepBackup = false

[rebase]
    stat = true

[grep]
    lineNumber = true

    # # Allow extended regular expressions
    # extendedRegexp = true

    fullName = true

[color]
    ui = auto
    branch = auto
    diff = auto
    status = auto
    interactive = auto

[color "branch"]
    current = cyan bold
    local = green bold
    remote = red bold
    upstream = red bold
    plain = yellow reverse

[color "diff"]
    context = "#888888"
    plain = normal
    meta = yellow bold
    func = "#cc99cc"
    frag = magenta bold
    old = red bold
    new = green bold
    commit = yellow
    whitespace = red reverse

[color "status"]
    header = normal
    added = green bold
    changed = yellow bold
    untracked = cyan
    branch = cyan bold
    nobranch = bold ul blink 12
    unmerged = red reverse bold

[color "grep"]
    context = "#888888"
    filename = yellow bold
    function = red
    linenumber = magenta bold
    match = green reverse bold
    matchContext = yellow reverse bold
    matchSelected = blue reverse bold
    separator = red bold
    selected = white bold

[format]
    pretty = format:%C(yellow)%h%C(reset) %C(green)%ad%C(auto)%d%C(reset) %s %C(blue)<%an>%C(reset)

[alias]

    alias = "!git config -l | grep alias | cut -c 7- | sort"

    type = cat-file -t
    dump = cat-file -p

    exec = '!exec '

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number' shows the diff between the state `$number' revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Commit all changes (all local modifications/additions/deletions).
    ca = !git add -A && git commit -av

    # Interactive rebase with the given number of latest commits
    ireb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove branches that have already been merged with master
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    this = !git init && ( [[ -n $(ls) ]] || touch .gitignore ) && git add . && git commit -m \"Initial commit\"

    # Clone a repository including all submodules.
    cl = clone --recursive

    st = status -s -b

    df = diff

    wdiff = diff --word-diff
    dw = diff --word-diff

    dc = diff --cached

    precommit = diff --cached --diff-algorithm=minimal -w

    today = !git log --since=midnight --author=\"$(git config user.name)\" --no-merges --all --pretty='%C(green)%ad%C(auto) - %s' --date=format:'%Y-%m-%d %a %H:%M'
    yesterday = !git log --since='1 day ago midnight' --until=midnight --author=\"$(git config user.name)\" --no-merges --all --pretty='%C(green)%ad%C(auto) - %s' --date=format:'%Y-%m-%d %a %H:%M'
    this-week = !git log --since=1.weeks --author=\"$(git config user.name)\" --no-merges --all --pretty='%C(green)%ad%C(auto) - %s' --date=format:'%Y-%m-%d %a %H:%M'

    today-all = !git log --since=midnight --no-merges --all

    # When was this file last updated, on each local branch.
    wwflu = "!f() { for b in $(git rev-parse --symbolic --branches); do echo -e `git log --format=%at:%ar -1 $b -- \"$1\"`\\\\t$b; done | sort -r | cut -f2 -d: ; }; f"

    forkdiff = !bash -c 'git diff $(git merge-base "$1" "$2") "$2" "${@: 3}" ' -

    log-local = log --oneline origin..HEAD

    ls = log --decorate --date=short
    ld = log --decorate --date=relative

    ll = log --decorate --date=short --stat

    tree = log --decorate --all --date=short --graph

    graph = log --graph -10 --branches --remotes --tags --format=format:'%C(yellow)%h %C(reset) %<(75,trunc)%s <%cn> (%cr) %C(red)%d' --date-order

    ls-modified  = "!git status --porcelain -uno | awk 'match($1, /M/) {print $2}'"
    ls-added     = "!git status --porcelain -uno | awk 'match($1, /A/) {print $2}'"
    ls-deleted   = "!git status --porcelain -uno | awk 'match($1, /D/) {print $2}'"
    ls-renamed   = "!git status --porcelain -uno | awk 'match($1, /R/) {print $2}'"
    ls-copied    = "!git status --porcelain -uno | awk 'match($1, /C/) {print $2}'"
    ls-updated   = "!git status --porcelain -uno | awk 'match($1, /U/) {print $2}'"
    ls-staged    = "!git status --porcelain -uno | grep -P '^[MA]' | awk '{ print $2 }'"

    ls-del  = ls-files -d
    ls-mod  = ls-files -m   # This will include deleted files also.
    ls-new  = ls-files --exclude-standard -o
    # this one is a MUST have
    ls-ign  = ls-files --exclude-standard -o -i
    lsfiles = ls-files --exclude-per-directory=.gitignore \
                     --exclude-from=.git/info/exclude \
                     -v -d -o -m -s -u

    last = log --decorate --date=short -1 --stat

    # Show last x commits
    last = !git log -$1 ${*:2} && :

    changed = show --pretty="format:" --name-only

    diffn = diff --name-only

    filelog = log --date=short --follow -C
    fl = log --date=short --follow -C

    related = !sh -c 'git log --follow --format=format:%H $1 | xargs -L1 git diff-tree --no-commit-id --name-only -r | sort | uniq -c | sort -b -n -r'

    who = shortlog -n -s --
    # who = shortlog -n -s -e --

    praise = blame -w
    archeology = blame -w -C -n
    whodoikill = blame -w -C -n

    find = "log --decorate -i --all --date=short --grep"

    # Find commits by commit message.
    findm = "!f() { git log --decorate --grep=$1 -i --all --date=short; }; f"

    whatwhen = log --decorate --date=short -p -S

    # Find commits by source code.
    findc = "!f() { git log --decorate --date=short -S $1; }; f"

    grep4d = !sh -c 'git log -p -S'$1' $2' -
# Not the best example, but: git grep4d CLOSED '*.java'

    # Case-sensitive.
    rg = "grep --break --heading --line-number"
grep-all = "!f() { git rev-list --all | xargs git grep $1; }; f"

    # `-I' = Don't match the pattern in binary files.
    g = "grep -I"
    gno = "grep -I --name-only"

    # List all tracked files.
    ls-tracked = ls-files -t

    tracked1 = "!f() { tracked=$(git ls-files ${1}); if [[ -z ${tracked} ]]; then echo 'File NOT tracked (or No such file)'; else echo 'File tracked'; fi; }; f"

    tracked2 = "!f() { echo -n ${1}': '; if [[ -f ${1} ]]; then tracked=$(git ls-files ${1}); if [[ -z ${tracked} ]]; then echo 'File NOT tracked'; else echo 'File tracked'; fi; else echo 'No such file!'; fi; }; f"
# does not work!?

    # List all untracked files.
    ls-untracked = ls-files --others

    ls-ignored = ls-files --others --ignored --exclude-standard

    ignore = "!f() { echo $1 >> \"${GIT_PREFIX}.gitignore\"; }; f"

    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged

    assumed = "!git ls-files -v | grep '^h' | cut -c 3-"

    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"

    assumeall = "!git status -s | awk {'print $2'} | xargs git assume"

    # Append additional (staged) changes to the PREVIOUS commit.
    fixup = commit -v --amend --reuse-message HEAD
    # fixlastcommit?

    # Commit changes to current HEAD (modified and deleted files) as amended commit.
    plus = commit -a -v --amend --reuse-message HEAD

    # Change previous commit's message to what you type in.
    medit = commit --amend -m

    # Credit an author on the LATEST commit.
    credit = "!f() { git commit --amend --author \"$1 <$2>\" --reuse-message HEAD; }; f"

    unmodify = checkout --
    undelete = checkout --

    unstage = reset HEAD --
# OK

    uncommit = reset --soft HEAD~1
# OK (or undolast)

    # Reset every file in your working directory to its committed state.
    wipe = reset --hard HEAD~1
# rollback?

    nevermind = !git reset --hard HEAD && git clean -d -f

    r = remote -v
    remotes = remote -v

    in = !(echo "Please fetch origin before." && git log --decorate ..@{u})
    inf = !(git remote update -p              && git log --decorate ..@{u})

    in-stat = log --stat ..@{u}

    in-what = diff --stat ...@{u}

    pull = pull -v

    # up = "!git stash && git pull && git stash pop"

    pull-autostash = ![[ -z $(git status --porcelain -uno) ]] && git pull || git stash save "autostash" && git pull && git stash pop

    up = pull --rebase --autostash
    up = !git fetch && git rebase --autostash FETCH_HEAD

    up-tmpname = "!f() { git remote update -p; git merge --ff-only @{u} ; }; f"

    # Rebasing non-linear changes (when the fast-forward merge is not possible).
    upr = "!f() { git remote update -p; git rebase -p @{u} ; }; f"

# cleanpull
# update (like svn? if we add a git reset in front?)
# sync

    update = !git pull --rebase --prune $@ && git submodule update --init --recursive
    update = !git pull                     && git submodule update --init --recursive

    pull-all = !"old=$(git rev-parse --abbrev-ref HEAD) ; for b in $(git for-each-ref refs/heads --format='%(refname)') ; do git checkout ${b#refs/heads/} ; git pull --ff-only ; done; git checkout ${old}"

    # Git config alias escaping...  This DOES NOT work.
    # prunelocal = !sh -c 'git fetch -p && git branch -vv | grep \": gone]\" | awk \"{print $1}\" | xargs git branch -d'

    # Here is a correct solution (using bash as a command-line).
    prunelocal = "!f() { git fetch -p && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -d ; }; f"

    # Here is a correct solution (which does not need access to the remote Git repo).
    prunelocal = "!f() { git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -d ; }; f"

    when = !stat -c %y .git/FETCH_HEAD | cut -d'.' -f1

    # Will only try to "merge" if your current HEAD commit is in the branch
    # you're merging in.  This will allow you to merge some commits whilst being
    # sure you won't get conflicts.
    ff = merge --ff-only
    ff = merge --ff-only @{u}

    # Avoid a fast-forward commit.
    mm = merge --no-ff

    merge-check = "!f() { git merge --no-commit --no-ff $1; git merge --abort; echo 'Merge aborted'; }; f"
# works for git fetch & git merge

    # Check how the merge of `dev' into master will go: git merge-dry-run dev.
    merge-dry-run = "!f() { grep -q 'changed in both' <<< $(git merge-tree $(git merge-base FETCH_HEAD $1) FETCH_HEAD $1) && echo 'Merge conflicts!' || echo 'No merge conflicts'; }; f"
# DOESN'T work for git fetch & git merge

    # Extract the "changed in both" lines as well as the conflicting parts.
    merge-dry-run-conflicts = "!f() { git merge-tree $(git merge-base $1 $2) $1 $2 | sed -n '/+<<<<<<< .our/,/+>>>>>>> .their/p;/^changed in both/{n;N;N;s/^/#/mg;p}' | cdiff; }; f"

    ours   = "!f() { git checkout --ours   $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    conflicts = "!git ls-files -u | cut -f 2 | sort -u"

    co = checkout

    # Switch to a branch, creating it if necessary.
    cob = checkout -b

    master = checkout master
    develop = checkout develop

    br = branch -a -vv

    bd = branch -d

    bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"

    bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"

    # Current branch.
    cb = "name-rev --name-only HEAD"

    sincemaster = diff master...

    rename = branch -m

    where = "branch -a --contains"

    # Find branches containing commit.
    findb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit.
    findt = "!f() { git describe --always --contains $1; }; f"

    # Save with name.
    ss = stash save
    ssave = stash save

    sshow = "!f() { git stash show stash^{/$@} -p; }; f" # Like sapply but shows it only

    sapply = "!f() { git stash apply stash^{/$@}; }; f" # Find stash with name like text

    spop = "!f() { git stash pop stash@{$(git stashid $@)}; }; f" # Like sapply but pops it off

    stashid = "!f() { git stash list | grep $@ | head -n 1 | sed -n 's/stash@{\\(.*\\)}.*/\\1/p'; }; f" # only accepts single word, no quotations

    hide = stash save --include-untracked # hides all files, including untracked files (faster than using --all)

    sspatch = stash save --patch
    ssscratch = stash save --keep-index

    sa = stash apply

    sapply = "!f() { git stash apply stash^{/$*}; }; f"

    sl = stash list
    stashes = stash list

    sp = stash pop

    ssh = stash show -p
    stashdiff = stash show -p

    sshow = "!f() { git stash show stash^{/$*} -p; }; f"

    sshno = stash show --name-only

    std = stash drop

    snapshot = !git stash save "Snapshot [$(date +\"%F %a %R\")]" && git stash apply "stash@{0}"

    # checkpoint and checkpoint recover
    cp      = !git stash save $(date +%F--%T) && git stash pop --index
    cpr     = "!f() { git fsck | grep commit | cut -d' ' -f3 | while read hash; do git rev-parse --verify --no-revs --quiet $hash^2 2>/dev/null && echo $hash | xargs git rev-list --since=${1:-1day} -1; done | xargs -L 1 git log --format=%at:%h -1 | sort|cut -f2 -d: | xargs -L 1 git log --graph --oneline --format='%Cblue%h %Cgreen(%ar) %Creset%s' -3 ; }; f"

    stash-unapply = !git stash show -p --no-textconv --binary | git apply -R

    # "show-branch -g=N" can't be aliased for N easily, so we stop here:
    sb  = show-branch
    # pg sbt master pu -- if the last line is 'master' and not 'master^'
    # or 'master~N' then pu is a descendent of master
    sbt = show-branch --topics
    sbs = show-branch --sha1-name

    out = log --date=short @{u}..
    out-stat = log --stat --date=short @{u}..

    outgoing = log --branches --not --remotes --decorate

    # Get the current branch name (not so useful in itself, but used in other
    # aliases).
    branch-name = !git rev-parse --abbrev-ref HEAD

upstream-name = !git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)

    # Push the current branch to the remote "origin", and set it to track the
    # upstream branch.
    publish = !git push -u origin $(git branch-name)

    unpublish = !git push origin :$(git branch-name)

    export-branch = !git format-patch --stdout $1 > ~/$(git branch-name).diff

    sha1-tag = '!f() { git name-rev --name-only "$@"; }; f'

    export = archive -o latest.tar.gz -9 --prefix=latest/

  # # Deploy
  # staging = !git push heroku-staging $(git name):master -f && git track 'Deployed to staging ' # push current branch to staging, can add more comments after
  # dev = !git push heroku-dev $(git name):master -f && git track 'Deployed to dev ' # push current branch to dev
  # deploy = !git push heroku $(git name):master -f && git track 'Deployed to produciton ' # push current branch to production

    version = describe --tags
    lasttag = describe --tags --abbrev=0

    # Show verbose output about tags.
    tags = tag -l
    tags = !git tag | sort -V

    releases = log --decorate --oneline --simplify-by-decoration --all

    debug  = "!set -x; GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2 git"

    ci = commit

    cp = cherry-pick -x
    pick = cherry-pick -s

    h = help

    root = rev-parse --show-toplevel

    # Get the path cleaned up.
    root = !pwd -P

    rma = !git ls-files --deleted -z | xargs -0 git rm

    sync = !git pull && git push

    sync = !git update && git co master && git pull && git commit @{-1}

    # git resync -> sync repository and rebase current branch.
    resync = !sh -c 'BRANCH_NAME=master && git checkout master && git fetch && git reset --hard origin/master && git rebase master'

    record = !sh -c '(git add -p -- $@ && git commit) || git reset' --

    lost = "!git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%C(reset)  %s' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

    graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

    # 2009-05-26  (merged-bed-bug) 6fe85ff regenerate rules Brad Bowman
    logdate = log --format=format:'%ad %d %h %s %an%n' --date=short
    br-date = !"sh -c 'for b in $(git branch --no-merged) ; \
               do git logdate -1 -r $b --; done'"

    conflicts = diff --name-only --diff-filter=U
    unmerged = diff --name-only --diff-filter=U
