## config --- SSH configuration file

# Copyright (C) 2004-2016 Fabrice Niessen

# Author: Fabrice Niessen
# Keywords: ssh, dotfile, config

## Commentary:

# SSH problem with $HOME
#
#     As it calls `sshd' (running as SYSTEM), `ssh' looks the `$HOME'
#     environmental variable from `/etc/passwd' (or from /etc/nsswitch.conf)
#     instead of using the current value of `$HOME'
#
# Configuration
#
#     SSH obtains configuration data in the following order:
#         o   command-line options,
#         o   user's configuration file and
#         o   system-wide configuration file
#
# Port forwarding
#
#     `sshd' must allow port forwarding for this technique to work. If this
#     capability is not allowed by default, the parameter
#     `AllowTcpForwarding' must be set to `yes' in the `sshd' configuration
#     file.
#
#   Local Port Forwarding
#
#     To redirect unsecured tcp traffic through a secure ssh tunnel
#     configure the Reflection client with a local listening port on the
#     client's host, a destination host and port and configure your tcp
#     client application (Step II) to connect to the local listening port.
#     Reflection will encrypt tcp traffic received on the local listening
#     port and forward that traffic securely to the destination host.
#
#   Remote Port Forwarding
#
#     Remote port forwarding reverses the direction that insecure tcp
#     traffic is forwarding. The tcp client is remote in relationship to the
#     ssh client and the tcp application server is local in relationship to
#     the ssh client. To redirect insecure tcp traffic through a secure ssh
#     tunnel, configure the Reflection client with a listening port on the
#     remote server, a local machine and port and configure your tcp
#     application to connect to the listening port on the remote server.
#     Reflection will encrypt the tcp traffic received on the remote server
#     listening port and forward that traffic securely to the local machine.
#
# Forward the DISPLAY using ssh when using Emacs
#
#     See the `-X' and `-Y' options to `ssh'.
#
# Notes
#
#     SSH can act as a bridge through a firewall whether the firewall is
#     protecting your computer, a remote server or both. All you need is an
#     SSH server exposed to the other side of the firewall. For example,
#     many DSL and cable-modem companies forbid sending e-mail from your own
#     machine over port 25 (SMTP).
#
#     Our next example is sending mail to your company's SMTP server through
#     your cable-modem connection. In this example, we use a shell account
#     on the SMTP server, which is named mail.example.net. The SSH command
#     is:
#
#         ssh -L 9025:mail.example.net:25 mail.example.net
#
#     Then, tell your mail transport agent to connect to port 9025 on
#     localhost to send mail. This exercise should look quite similar to the
#     last example; we are tunneling from local port 9025 to
#     mail.example.net port 25 over mail.example.net. As far as the firewall
#     sees, it is passing normal SSH data on the normal SSH port, 22,
#     between you and mail.example.net.
#
#     A final example is connecting through an ISP firewall to a mail or
#     news server inside a restricted network. What would this look like? In
#     fact, it would be the same as the first example; mail.example.net can
#     be walled away inside the network, inaccessible to the outside
#     world. All you need is an SSH connection to a server that can see it,
#     such as shell.example.net.
#
# Identity file
#
#     One way of removing the password prompt is to use an identity
#     file. This provides a key that is recognised by the remote account and
#     allows automatic logon.
#
# SSH Debugging
#
#     Use the verbose option `-vvv' to ssh.
#
#     Use the `~#' SSH escape sequence to see the connections in use (and the
#     forwarded sessions, if it is being used)

## Code:

# modify to taste

# don't hash the `known_hosts' file (for the sake of hostname completion)
HashKnownHosts no

# multiplex several shells over a single ssh connection (cutting login times
# for a new shell)
ControlMaster auto
# ControlPath /tmp/%r@%h:%p

# `%h' in a `$HOME/.ssh/config' file is replaced with the hostname

Host *
        Compression yes
        NumberOfPasswordPrompts 3

# A common port naming is 8000 + initial port, ie 8443 for HTTPS...

Host orgmode.org
        IdentityFile ~/.ssh/id_repo.or.cz_rsa

Host github.com
	User git
	HostName github.com
	PreferredAuthentications publickey
	IdentityFile ~/.ssh/id_github.com_rsa

Host git.assembla.com
	IdentityFile ~/.ssh/id_github.com_rsa

## config ends here
